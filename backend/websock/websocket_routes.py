from fastapi import APIRouter, WebSocket, WebSocketDisconnect, Depends
from fastapi.responses import JSONResponse
from typing import Dict
from backend.models.models import Message, RoomParticipant, MessageReadStatus
from backend.database import get_db
from sqlalchemy.ext.asyncio import AsyncSession
from backend.auth.token_utils import verify_access_token_for_user_id, verify_access_token_for_user_id_ws
from sqlalchemy import select
from datetime import datetime, timezone

router_ws = APIRouter()

connected_users: Dict[int, WebSocket] = {}

@router_ws.websocket("/ws/online/{user_id}")
async def websocket_endpoint(websocket: WebSocket, user_id: int):
    await websocket.accept()
    connected_users[user_id] = websocket

    # üî• –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –æ–Ω–ª–∞–π–Ω
    await websocket.send_json({
        "event": "online_users_list",
        "users": list(connected_users.keys())
    })

    # üî• –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ –Ω–æ–≤–æ–º –æ–Ω–ª–∞–π–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    await notify_all_users("user_online", user_id)
    print(f"üîµ User {user_id} is online. Total connected: {len(connected_users)}")

    try:
        while True:
            await websocket.receive_text()

    except WebSocketDisconnect:
        connected_users.pop(user_id, None)
        await notify_all_users("user_offline", user_id)
        print(f"‚ö´ User {user_id} went offline. Total connected: {len(connected_users)}")

async def notify_all_users(event: str, user_id: int):
    for uid, ws in connected_users.items():
        if uid != user_id:
            try:
                print("send status")
                await ws.send_json({
                    "event": event,
                    "user_id": user_id
                })
            except:
                pass

@router_ws.websocket("/ws/send_message/{room_id}")
async def send_message_to_room(
    websocket: WebSocket,
    room_id: int,
    db_session: AsyncSession = Depends(get_db)  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è —Å –ë–î
):
    await websocket.accept()

    try:
        while True:
            data = await websocket.receive_json()

            token = data.get("token")
            message = data.get("message", "")

            if not token:
                await websocket.send_json({"event": "error", "message": "Missing token"})
                continue

            if not message:
                await websocket.send_json({"event": "error", "message": "Message cannot be empty"})
                continue

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ sender_id
            try:
                sender_id = await verify_access_token_for_user_id_ws(token)
            except Exception as e:
                await websocket.send_json({"event": "error", "message": f"Invalid token: {str(e)}"})
                continue

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ
            new_message = Message(
                sender_id=sender_id,
                room_id=room_id,
                content=message,
                timestamp=datetime.now(timezone.utc),
                read=False
            )

            db_session.add(new_message)
            await db_session.commit()

            # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã
            async with db_session.begin():
                result = await db_session.execute(select(RoomParticipant).filter_by(room_id=room_id))
                room_participants = result.scalars().all()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
            for participant in room_participants:
                user_id = participant.user_id
                ws = connected_users.get(user_id)

                if ws:
                    try:
                        await ws.send_json({
                            "event": "new_message",
                            "sender_id": sender_id,
                            "room_id": room_id,
                            "message": message,
                            "read": False
                        })
                        print(f"Message sent to user {user_id} in room {room_id}: {message}")
                    except Exception as e:
                        print(f"Error sending message to user {user_id} in room {room_id}: {e}")
                else:
                    print(f"User {user_id} is not connected to WebSocket")

            await websocket.send_json({
                "event": "message_sent",
                "status": "success",
                "message": message
            })

    except WebSocketDisconnect:
        print(f"‚ö´ User disconnected from room {room_id}")
        connected_users.pop(sender_id, None)

    return JSONResponse(status_code=200, content={"message": "Message sent successfully"})

@router_ws.websocket("/ws/read_message/{room_id}/{message_id}")
async def mark_message_as_read(
    websocket: WebSocket,
    room_id: int,
    message_id: int,
    user_id: int = Depends(verify_access_token_for_user_id),  # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
    db_session: AsyncSession = Depends(get_db)  # –°–µ—Å—Å–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
):
    await websocket.accept()

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID
        async with db_session.begin():
            result = await db_session.execute(select(Message).filter_by(id=message_id))
            message = result.scalar()

        if not message:
            await websocket.send_json({"event": "error", "message": "Message not found"})
            return

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ MessageReadStatus –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        async with db_session.begin():
            result = await db_session.execute(select(MessageReadStatus).filter_by(message_id=message_id, user_id=user_id))
            read_status = result.scalar()

        if not read_status:
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
            new_read_status = MessageReadStatus(
                message_id=message_id,
                user_id=user_id,
                read_at=datetime.now(timezone.utc)
            )
            db_session.add(new_read_status)
            await db_session.commit()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–æ—á–∏—Ç–∞–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∫–æ–º–Ω–∞—Ç—ã
        async with db_session.begin():
            result = await db_session.execute(select(RoomParticipant).filter_by(room_id=room_id))
            room_participants = result.scalars().all()

        # –ï—Å–ª–∏ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ—á–∏—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if len(room_participants) == len(message.read_status):
            message.read = True  # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ "–ø—Ä–æ—á–∏—Ç–∞–Ω–æ"
            await db_session.commit()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏
        await notify_all_users("message_read", user_id)

        await websocket.send_json({
            "event": "message_read_status",
            "message_id": message_id,
            "status": "read"
        })

    except WebSocketDisconnect:
        print(f"‚ö´ User {user_id} disconnected")

    return JSONResponse(status_code=200, content={"message": "Message marked as read"})




